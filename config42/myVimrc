" | *** SET AUTOLOAD *** |
if &term =~ "xterm"
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[2 q"
endif
set number
"packadd! dracula
syntax enable
"colorscheme synthwave84
filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set noexpandtab
set noerrorbells
set wildmenu
set showcmd
set ignorecase
set smartcase
set autoindent
set scrolloff=4
set history=1000
set noswapfile
set mouse=a
set laststatus=2
set title
set t_Co=256

" ___________________________________________________

" | *** AUTOCMD *** |

autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
"___________________________________________________

" | *** MAPPING *** |
let mapleader = "-"

noremap ` :Stdheader<CR>
map <leader>` i#include "libft.h"<CR><CR>
noremap <space>` iint main(int ac, char **av)<CR>{<CR><tab>return (0);<CR>}<esc>gg=G
inoremap <space><space> <esc>
vnoremap <space><space> <esc>
noremap w :w<CR>
noremap q :q!<CR>
noremap <c-c> :noh<CR>
noremap <leader>o :NERDTreeToggle<CR>
noremap <leader>f :NERDTreeFind<CR>
noremap <leader>1 :g/printf/d<CR>
noremap <leader>2 :LspDefinition<CR>
noremap <leader>3 :LspReferences<CR>
noremap <leader>4 :LspRename<CR>
noremap <leader>5 :LspWorkspaceSymbol<CR>
noremap <leader>6 :LspDocumentSymbol<CR>

" _________________________________________________

" | *** FUNCTIONS *** |

" Relative number double mapping function
function! NumberToggle()
        if(&relativenumber == 1)
                set norelativenumber
        else
                set relativenumber
        endif
endfunc
map <leader>r :call NumberToggle()<CR>

" Transparent background double mapping function
let t:is_transparent = 0
function! Toggle_transparent_background()
  if t:is_transparent == 0
    hi Normal guibg=#111111 ctermbg=black
        set background=dark
    let t:is_transparent = 1
  else
    hi Normal guibg=NONE ctermbg=NONE
    let t:is_transparent = 0
  endif
endfunction
map <leader>t :call Toggle_transparent_background()<CR>

" ___________________________________________________

" | *** PLUGINS *** |

call plug#begin()

Plug 'connorholyday/vim-snazzy'
Plug 'jiangmiao/auto-pairs'
Plug '42Paris/42header'
Plug 'preservim/nerdtree'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'lighttiger2505/deoplete-vim-lsp'
Plug 'neovim/nvim-lspconfig'
Plug 'jackguo380/vim-lsp-cxx-highlight'
"Plug 'vim-syntastic/syntastic'
"Plug 'alexandregv/norminette-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
Plug 'puremourning/vimspector'

let g:deoplete#enable_at_startup = 1
call plug#end()

let g:vimspector_enable_mappings = 'HUMAN'
colorscheme tokyonight
" colorscheme snazzy
" ___________________________________________________

" | *** SYNTASTIC CONFIG *** |

" Enable norminette-vim (and gcc)
let g:syntastic_c_checkers = ['norminette', 'gcc']
let g:syntastic_aggregate_errors = 1

" Set the path to norminette (do no set if using norminette of 42 mac)
let g:syntastic_c_norminette_exec = 'norminette'

" Support headers (.h)
let g:c_syntax_for_h = 1
let g:syntastic_c_include_dirs = ['include', '../include', '../../include', 'libft', '../libft/include', '../../libft/include']

" Pass custom s to norminette (this one ignores 42header)
let g:syntastic_c_norminette_args = '-R CheckTopCommentHeader'

" Check errors when opening a file (disable to speed up startup time)
let g:syntastic_check_on_open = 1

" Enable error list
let g:syntastic_always_populate_loc_list = 1

" Automatically open error list
let g:syntastic_auto_loc_list = 1

" Skip check when closing
let g:syntastic_check_on_wq = 0



" ___________________________________________________

" | *** AIRLINE CONFIG *** |

" autocmd vimenter * colorscheme violet
"let g:airline_powerline_fonts = 1
let g:airline_theme='violet'

" ___________________________________________________
"
" Register ccls C++ lanuage server.
"if executable('ccls')
"   au User lsp_setup call lsp#register_server({
"         \ 'name': 'ccls',
"      \ 'cmd': {server_info->['ccls']},
"      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
"      \ 'initialization_options': {'cache': {'directory': expand('~/.cache/ccls') }},
"      \ 'allowlist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
"      \ })
"endif
if executable('ccls')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'ccls',
      \ 'cmd': {server_info->['ccls']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(
      \   lsp#utils#find_nearest_parent_file_directory(
      \     lsp#utils#get_buffer_path(), ['.ccls', 'compile_commands.json', '.git/']))},
      \ 'initialization_options': {
      \   'highlight': { 'lsRanges' : v:true },
      \   'cache': {'directory': stdpath('cache') . '/ccls' },
      \ },
      \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
      \ })
endif

let g:neomake_cpp_enabled_makers = ['clang']
let g:neomake_cpp_clang_maker = {
   \ 'exe': 'clang++',
   \ 'args': ['-Wall', '-Iinclude', '-Wextra', '-Weverything', '-pedantic', '-Wno-sign-conversion'],
   \ }
let g:syntastic_c_include_dirs = ['include', '../include', '../../include', 'libft', '../libft/include', '../../libft/include']
